---
title: "Pipes"
execute: 
  echo: True
author: Cath Riddoch
format:
  html:
    embed-resources: true
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| include: false

library(tidyverse)
```

no rstudio https://webr.r-wasm.org/latest/

```{r}
head(mtcars)
```



## What are pipes?

%>% from magrittr package 2014 (Tidyverse)

Link to picture by Magritte
https://en.wikipedia.org/wiki/The_Treachery_of_Images

|> base r

-   new pipe was introduced into R in May 2021 with version 4.1.0

-   new place holder intro R in April 2022 with version 4.2.0

I forgot to mention, not on work computers but https://github.com/tonsky/FiraCode
is a font that does nice pipes and arrows.

In RStudio the Keyboard shortcut for a pipe is ctrl + shift + m 

Tools, Global Options , select
"Code" option for "use native pipe operator, |>"

Both types of pipe pass the thing on the left to the thing on the right, usually as the first argument of a function call.


## Example of using with or without pipe
Find all cars with 4 cylinders (cyl)

```{r}
filter(mtcars, cyl == 4)
```


```{r}
mtcars |>
  filter(cyl == 4)
```

## Place holders

magrittr placeholder is .

base r placeholder is _

```{r}
mtcars %>%
  lm(mpg ~ wt, data = .)
```

```{r}
mtcars |>
  lm(mpg ~ wt, data = _)
```


## Example 2
### find the mean mpg of cars with 4 cylinders
```{r}


# get the cars with 4 cyl
four_cylinder_cars<- filter(mtcars, cyl == 4)

# get the mpg for those 4 cylinder cars
mpg_values<- four_cylinder_cars$mpg

# calculate the mean
result<- mean(mpg_values)

result
```

```{r}
mtcars |>
  filter(cyl == 4)|>
  _$mpg |>
  mean()
```
or 
```{r}
mtcars %>%
  filter(cyl == 4) %>%
  .$mpg %>%
  mean()
```

Using select in this example is tempting but will error since select returns a dataframe not a vector.  
```{r}
mtcars |>
  filter(cyl == 4) |>
  select(mpg) |>
  mean()
```
We could use select with summarise or use pull instead. 

```{r}
mtcars |>
  filter(cyl == 4) |>
  pull(mpg) |>
  mean()
```


Or have nested function calls (don't do this in R unless you really, really need to).

```{r}
mean(filter(mtcars, cyl == 4)$mpg)
```


## Why use base pipe?

-   better performance

-   works without dependency on Magrittr

-   less cryptic errors (errors return the name of the piped object and not just a dot)

-   looks nicer!


## Exercises
https://github.com/c-riddoch/training

1. Find the mass in kg of the heaviest 6 cylinder car (use wt_kg = wt * 453.6)
```{r}
mtcars |>
  filter(cyl == 6)|>
  mutate(wt_kg = wt * 453.6)|>
  _$wt_kg |>
  max()
```

Interestingly even without 4th line it works.
```{r}
mtcars |>
  filter(cyl == 6)|>
  mutate(wt_kg = wt * 453.6)|>
  max()
```

Can do it with summarise or even select then summarise.
```{r}
mtcars |>
  filter(cyl == 6) |>
  mutate(wt_kg = wt * 453.6) |>
  summarise(max_wt_kg = max(wt_kg))
```


2. Return the name of the 6 cylinder car with highest mpg 

```{r}
mtcars |>
  arrange(desc(mpg)) |>
  head(1)|>
  rownames()
```


